name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
      - env:
          CLIPPYFLAGS: --deny warnings --allow clippy::needless-lifetimes
        run: |
          cargo fmt --all -- --check
          cargo clippy --tests -- $CLIPPYFLAGS
          for example in examples/*; do (cd $example/; cargo clippy -- $CLIPPYFLAGS) || exit 1; done

  test:
    name: python${{ matrix.python-version }}-${{ matrix.platform.python-architecture }} ${{ matrix.platform.os }}
    runs-on: ${{ matrix.platform.os }}
    needs: [lint, check-msrv, linalg-example]
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        platform: [
          { os: "ubuntu-latest", python-architecture: "x64", rust-target: "x86_64-unknown-linux-gnu" },
          { os: "macOS-latest",   python-architecture: "x64", rust-target: "x86_64-apple-darwin" },
          { os: "windows-latest", python-architecture: "x64", rust-target: "x86_64-pc-windows-msvc" },
          { os: "windows-latest", python-architecture: "x86", rust-target: "i686-pc-windows-msvc" },
        ]
        include:
          # PyPy and NumPy on macOS and Windows is too slow and brittle
          - python-version: pypy-3.7
            platform: { os: "ubuntu-latest", python-architecture: "x64", rust-target: "x86_64-unknown-linux-gnu" }
          - python-version: pypy-3.8
            platform: { os: "ubuntu-latest", python-architecture: "x64", rust-target: "x86_64-unknown-linux-gnu" }
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.platform.python-architecture }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.platform.rust-target }}
          default: true
      - name: Enable Cargo resolver v2 to avoid PyO3 features missing in PyPy
        run: echo 'resolver = "2"' >> Cargo.toml
      - name: Build without default features
        run: cargo build --no-default-features
      - name: Build with default features
        run: cargo build
      - name: Run cargo test
        run: |
            pip install numpy
            cargo test
        # Not on PyPy, because no embedding API
        if: ${{ !startsWith(matrix.python-version, 'pypy') }}
      - name: Install poetry
        run: pip install poetry
      - name: Test example
        run: |
            poetry install
            poetry run maturin develop
            poetry run pytest
        working-directory: examples/simple-extension
    env:
      CARGO_TERM_VERBOSE: true
      CARGO_BUILD_TARGET: ${{ matrix.platform.rust-target }}
      RUST_BACKTRACE: 1

  check-msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install MSRV Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.48.0
          default: true
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: examples/simple-extension
        continue-on-error: true
      - name: Install toml and poetry
        run: pip install toml poetry
      - name: Edit Cargo.toml and detach from workspace
        run: |
          import toml
          cargo_toml = toml.load("Cargo.toml")
          cargo_toml["dependencies"]["ndarray"] = "0.13.1"
          cargo_toml["dependencies"]["num-complex"] = "0.2.4"
          cargo_toml["workspace"] = {}
          with open("Cargo.toml", "w") as f:
            toml.dump(cargo_toml, f)
        working-directory: examples/simple-extension
        shell: python
      - name: Use ndarray 0.13.1
        run: |
          cargo generate-lockfile
          cargo update -p $(cargo pkgid -p ndarray 2>&1 >/dev/null | grep 0.15 | sed -e 's/^[ \t]*//') --precise 0.13.1
        working-directory: examples/simple-extension
      - name: Test example
        run: |
          poetry install
          poetry run maturin develop
          poetry run pytest
        working-directory: examples/simple-extension

  linalg-example:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install gfortran
        run: |
          sudo apt install -y gfortran
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
      - name: Install poetry
        run: pip install poetry
      - name: Test example
        run: |
            poetry install
            poetry run maturin develop
            poetry run pytest
        working-directory: examples/linalg
